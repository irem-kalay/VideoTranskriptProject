from youtube_transcript_api import YouTubeTranscriptApi

import re
from urllib.parse import urlparse, parse_qs

#video_id'sini çıkarıyorum
def extract_video_id_from_url(url):
    """
    YouTube URL'sinden video ID'sini çıkarır
    """
    # Farklı YouTube URL formatlarını destekliyor
    # https://www.youtube.com/watch?v=VIDEO_ID
    # https://youtu.be/VIDEO_ID
    # https://www.youtube.com/embed/VIDEO_ID

    # URL'yi parse
    parsed_url = urlparse(url)

    # youtube.com/watch formatı
    if parsed_url.hostname in ['www.youtube.com', 'youtube.com']:
        if parsed_url.path == '/watch':
            query_params = parse_qs(parsed_url.query)
            return query_params.get('v', [None])[0]
        elif parsed_url.path.startswith('/embed/'):
            return parsed_url.path.split('/embed/')[1]

    # youtu.be formatı
    elif parsed_url.hostname == 'youtu.be':
        return parsed_url.path[1:]  # İlk '/' karakterini atla

    # Video ID bulunamadı
    return None

# YouTube URL'sini alıyorum
youtube_url = 'https://www.youtube.com/watch?v=lWA2pjMjpBs'

# URL'den video ID'sini çıkar
video_id = extract_video_id_from_url(youtube_url)

if video_id is None:
    print("Video ID bulunamadı!")
    exit()

print(f"Çıkarılan Video ID: {video_id}")

##############################################Burada başlıyor################33

ytt_api = YouTubeTranscriptApi()

#video_id= 'qkh0Nr7keV4'
# retrieve the available transcripts
transcript_list = ytt_api.list(video_id)
#https://www.youtube.com/watch?v=lWA2pjMjpBs
# iterate over all available transcripts
for transcript in transcript_list:

    # the Transcript object provides metadata properties
    print(
        transcript.video_id,
        transcript.language,
        transcript.language_code,
        # whether it has been manually created or generated by YouTube
        transcript.is_generated,
        # whether this transcript can be translated or not
        transcript.is_translatable,
        # a list of languages the transcript can be translated to
        transcript.translation_languages,
    )

    # fetch the actual transcript data
    transcript_data = transcript.fetch() #burada transcript_data
    print(transcript_data)

    #txt dosyasına yazıcam
    filename = f"{video_id}_{transcript.language_code}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        for entry in transcript_data:
            start_time = entry.start
            duration =entry.duration
            text = entry.text
            f.write(f"[{start_time:.2f} - {start_time + duration:.2f}] {text}\n")

    print(f"Transkript dosyaya yazıldı: {filename}")

    # translating the transcript will return another transcript object
   # print(transcript.translate('en').fetch()) #şimdilik kullanmıyorum

# you can also directly filter for the language you are looking for, using the transcript list
#transcript = transcript_list.find_transcript(['de', 'en'])

# or just filter for manually created transcripts
#transcript = transcript_list.find_manually_created_transcript(['de', 'en'])

# or automatically generated ones
#transcript = transcript_list.find_generated_transcript(['de', 'en'])

